stages:
    - sonarcloud-check
    - build-webapps
    - publish
    - deploy

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  MYSQL_DATABASE: "demo"
  MYSQL_ROOT_PASSWORD: "password"
  MYSQL_USER: "demo"
  MYSQL_PASSWORD: "password"
  TAG_LATEST_API_DELIVERIES: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest.api.deliveries
  TAG_COMMIT_API_DELIVERIES: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA.api.deliveries
  TAG_LATEST_WEB_DELIVERIES: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest.web.deliveries
  TAG_COMMIT_WEB_DELIVERIES: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA.web.deliveries
  TAG_LATEST_API_ORDERS: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest.api.orders
  TAG_COMMIT_API_ORDERS: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA.api.orders
  TAG_LATEST_WEB_ORDERS: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest.web.orders
  TAG_COMMIT_WEB_ORDERS: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA.web.orders

#######################################################################################################
sonarcloud-check-deliveries-server:
  stage: sonarcloud-check
  image: maven:3.6.3-jdk-11
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  services:
    - mysql:5.7
  script:
    - export SONAR_TOKEN=$SONAR_TOKEN_DELIVERIES_SERVER
    - cd deliveries_server
    - mvn verify sonar:sonar -Dspring.profiles.active=ci -Dsonar.qualitygate.wait=true

sonarcloud-check-orders-server:
  stage: sonarcloud-check
  image: maven:3.6.3-jdk-11
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  services:
    - mysql:5.7
  script:
    - export SONAR_TOKEN=$SONAR_TOKEN_ORDERS_SERVER
    - cd orders_server
    - mvn verify sonar:sonar -Dspring.profiles.active=ci -Dsonar.qualitygate.wait=true

sonarcloud-check-deliveries-webapp:
  stage: sonarcloud-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - export SONAR_TOKEN=$SONAR_TOKEN_DELIVERIES_WEBAPP
    - cd deliveries_webapp
    - sonar-scanner

sonarcloud-check-orders-webapp:
  stage: sonarcloud-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - export SONAR_TOKEN=$SONAR_TOKEN_ORDERS_WEBAPP
    - cd orders_webapp
    - sonar-scanner

#######################################################################################################
build-deliveries-webapp:
  stage: build-webapps
  image: node:14
  script:
    - cd deliveries_webapp
    - yarn install
    - yarn build

build-orders-webapp:
  stage: build-webapps
  image: node:14
  script:
    - cd orders_webapp
    - yarn install
    - yarn build

#######################################################################################################
publish-WEB-DELIVERIES:
  image: docker:18.09
  stage: publish
  services:
    - docker:18.09-dind
  script:
    - cd deliveries_webapp
    - docker build -t $TAG_COMMIT_WEB_DELIVERIES -t $TAG_LATEST_WEB_DELIVERIES .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT_WEB_DELIVERIES
    - docker push $TAG_LATEST_WEB_DELIVERIES
  only:
    - develop

publish-API-DELIVERIES:
  image: docker:18.09
  stage: publish
  services:
    - docker:18.09-dind
  script:
    - cd deliveries_server
    - docker build -t $TAG_COMMIT_API_DELIVERIES -t $TAG_LATEST_API_DELIVERIES .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT_API_DELIVERIES
    - docker push $TAG_LATEST_API_DELIVERIES
  only:
    - develop

publish-WEB-ORDERS:
  image: docker:18.09
  stage: publish
  services:
    - docker:18.09-dind
  script:
    - cd orders_webapp
    - docker build -t $TAG_COMMIT_WEB_ORDERS -t $TAG_LATEST_WEB_ORDERS .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT_WEB_ORDERS
    - docker push $TAG_LATEST_WEB_ORDERS
  only:
    - develop

publish-API-ORDERS:
  image: docker:18.09
  stage: publish
  services:
    - docker:18.09-dind
  script:
    - cd orders_server
    - docker build -t $TAG_COMMIT_API_ORDERS -t $TAG_LATEST_API_ORDERS .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT_API_ORDERS
    - docker push $TAG_LATEST_API_ORDERS
  only:
    - develop

#######################################################################################################
deploy-DB-DELIVERIES:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f mysql_deliveries || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --name mysql_deliveries -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=demo -e MYSQL_USER=demo -e MYSQL_PASSWORD=password -p 3306:3306 -d mysql/mysql-server:5.7"
    - sleep 30
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop

deploy-DB-ORDERS:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f mysql_orders || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --name mysql_orders -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=demo -e MYSQL_USER=demo -e MYSQL_PASSWORD=password -p 3307:3306 -d mysql/mysql-server:5.7"
    - sleep 30
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop

deploy-WEB-DELIVERIES:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT_WEB_DELIVERIES"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f deliveries_webapp || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name deliveries_webapp $TAG_COMMIT_WEB_DELIVERIES"
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop

deploy-WEB-ORDERS:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT_WEB_ORDERS"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f orders_webapp || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 81:80 --name orders_webapp $TAG_COMMIT_WEB_ORDERS"
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop

deploy-API-DELIVERIES:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT_API_DELIVERIES"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f deliveries_api || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --network host -d -p 8080:8080 -e environment=prod --name deliveries_api $TAG_COMMIT_API_DELIVERIES"
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop

deploy-API-ORDERS:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT_API_ORDERS"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f orders_api || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run --network host -d -p 8081:8081 -e environment=prod --name orders_api $TAG_COMMIT_API_ORDERS"
  environment:
    name: production
    url: http://$SERVER_IP
  only:
    - develop
